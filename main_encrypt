% This script calls all the different steps/functions that are required by AES for encryption
function cipher = main_encrypt(userData, inputKey, keyType, AESMode, AESType, IVValue)
    %{
      AES proccess:
        1)KeyExpansion
        2)AddRoundKey
        3)SubBytes     ---
          ShiftRows       | Repeat this proccess for x9, x11, x13 time
          MixColumns      |  Depends on AES bit length
          AddRoundKey  ---
        4)SubBytes
          ShiftRows
          AddRoundKey
    %}
    cipher = [];
    hexData = format_encrypt_in(userData);
    hexDataSize = size(hexData,2);
    % Call the function key_creation and acquire all the round keys
    allKeys = key_creation(inputKey, keyType, AESMode);
    % Repeat the AES process for the amount of 16 byte blocks in hexData
    if AESMode == "128-bit"
        numbRounds = 10;
    end
    if AESMode == "192-bit"
        numbRounds = 12;
    end
    if AESMode == "256-bit"
        numbRounds = 14;
    end
    if AESType == "CBC"
        % If IV text box is left empty assign empty values
        if IVValue == ""
            IVValue = "00000000000000000000000000000000";
        end
        % XOR(IV value, first plaintext block)
        IVState = bitxor(hex2dec(AES_format(char(IVValue))),hex2dec(hexData(:,1)));
        IVState = string(dec2hex(IVState));
        % Assign first plaintext block with the XOR output
        hexData(:,1) = IVState;
    end
    for hexBlock = 1:hexDataSize
        roundKeyOutput = add_round_key(hexData(:,hexBlock),allKeys(:,1));
        for rounds = 2:numbRounds
            subByteOutput = sub_byte(roundKeyOutput, "encrypt");
            shiftRowOutput = shift_row(subByteOutput, "encrypt");
            mixColumnOutput = mix_column(shiftRowOutput, "encrypt");
            roundKeyOutput = add_round_key(mixColumnOutput,allKeys(:,rounds));
        end
        subByteOutput = sub_byte(roundKeyOutput, "encrypt");
        shiftRowOutput = shift_row(subByteOutput, "encrypt");
        roundKeyOutput = add_round_key(shiftRowOutput, allKeys(:,numbRounds+1));
        cipher = [cipher ; roundKeyOutput];

        if AESType == "CBC"
            % will not affect the last Plaintext 16 byte block
            if hexBlock ~= hexDataSize
                % XOR(cipher block, future plaintext block)
                cbcState = bitxor(hex2dec(roundKeyOutput),hex2dec(hexData(:,hexBlock+1)));
                cbcState = string(dec2hex(cbcState));
                % Replace future plaintext block with XOR output
                hexData(:,hexBlock+1) = cbcState;
            end
        end
    end
    cipher = AES_format(cipher);
end
