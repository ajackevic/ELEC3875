classdef GUI < matlab.apps.AppBase

    % Properties that correspond to app components
    properties (Access = public)
        AES_Encryption                 matlab.ui.Figure
        AESENCRYPTIONLabel             matlab.ui.control.Label
        DataTextAreaLabel              matlab.ui.control.Label
        DataTextArea                   matlab.ui.control.TextArea
        KeyTextAreaLabel               matlab.ui.control.Label
        KeyTextArea                    matlab.ui.control.TextArea
        AESTypeDropDown_2Label         matlab.ui.control.Label
        AESTypeDropDown                matlab.ui.control.DropDown
        EncryptButton                  matlab.ui.control.Button
        DecryptButton                  matlab.ui.control.Button
        KeyformatDropDownLabel         matlab.ui.control.Label
        KeyformatDropDown              matlab.ui.control.DropDown
        IVTextAreaLabel                matlab.ui.control.Label
        IVTextArea                     matlab.ui.control.TextArea
        Image                          matlab.ui.control.Image
        DataformatInputOutputDropDownLabel  matlab.ui.control.Label
        DataformatInputOutputDropDown  matlab.ui.control.DropDown
        AESModeDropDownLabel           matlab.ui.control.Label
        AESModeDropDown                matlab.ui.control.DropDown
    end

    % Callbacks that handle component events
    methods (Access = private)

        % Button pushed function: EncryptButton
        function EncryptButtonPushed(app, event)
            userData = app.DataTextArea.Value;
            keyInput = app.KeyTextArea.Value;
            keyType = app.KeyformatDropDown.Value;
            AESMode = app.AESModeDropDown.Value;
            AESType = app.AESTypeDropDown.Value;
            IVValue = app.IVTextArea.Value;
            dataFormat = app.DataformatInputOutputDropDown.Value;
            % Raise error dialog box if entered key is invalid
            if key_check(keyInput, keyType, AESType) || IV_check(IVValue) || data_check(userData, dataFormat, keyType, "encrypt")
                if key_check(keyInput, keyType, AESType)
                    msgbox(["    Invalid entered key. Check entered key";
                            "and whether the correct key format is selected."], "Invalid key");
                end
                if IV_check(IVValue)
                    msgbox(["                 Invalid entered IV. ";
                            "Format is 16 hex value, check entered value "], "Invalid IV");
                end
                if data_check(userData, dataFormat, keyType, "encrypt")
                    msgbox(["         Invalid entered data.";
                            "Encryption data requires an input" ], "Invalid data");
                end
            else
                cipher = main_encrypt(userData, dataFormat, keyInput, keyType, AESMode, AESType, IVValue);
                app.DataTextArea.Value = cipher;
            end
        end

        % Button pushed function: DecryptButton
        function DecryptButtonPushed(app, event)
            userData = app.DataTextArea.Value;
            keyInput = app.KeyTextArea.Value;
            keyType = app.KeyformatDropDown.Value;
            AESType = app.AESTypeDropDown.Value;
            AESMode = app.AESModeDropDown.Value;
            IVValue = app.IVTextArea.Value;
            dataFormat = app.DataformatInputOutputDropDown.Value;
            % Raise error dialog box if either key, data or IV scripts rais flags
            if key_check(keyInput, keyType, AESType) || IV_check(IVValue) || data_check(userData, "pass", keyType, "decrypt")
                if key_check(keyInput, keyType, AESType)
                    msgbox(["    Invalid entered key. Check entered key";
                            "and whether the correct key format is selected."], "Invalid key");
                end
                if IV_check(IVValue)
                    msgbox(["                 Invalid entered IV. ";
                            "Format is 16 hex value, check entered value "], "Invalid IV");
                end
                if data_check(userData, "pass", keyType, "decrypt")
                    msgbox(["        Invalid entered data. Decryption format is a";
                            " continuous hex value of length that is a multiple of 16" ], "Invalid data");
                end
            else
                plainttext = main_decrypt(userData, dataFormat, keyInput, keyType, AESMode, AESType, IVValue);
                app.DataTextArea.Value = plainttext;
            end
        end

        % Value changed function: KeyTextArea
        function KeyTextAreaValueChanged(app, event)

        end

        % Callback function
        function AESModeDropDownValueChanged(app, event)

        end

        % Value changed function: AESModeDropDown
        function AESModeDropDownValueChanged2(app, event)
            if app.AESModeDropDown.Value == "CBC"
                % Reveal/enable IV text and label if AES Type is CBC
                app.IVTextArea.Enable = 1;
                app.IVTextAreaLabel.Enable = 1;
            else
                % Hide/disable IV text and label if AES Type is ECB
                app.IVTextArea.Enable = 0;
                app.IVTextAreaLabel.Enable = 0;
            end
        end
    end

    % Component initialization
    methods (Access = private)

        % Create UIFigure and components
        function createComponents(app)

            % Create AES_Encryption and hide until all components are created
            app.AES_Encryption = uifigure('Visible', 'off');
            app.AES_Encryption.AutoResizeChildren = 'off';
            app.AES_Encryption.Color = [1 1 1];
            app.AES_Encryption.Position = [100 100 765 487];
            app.AES_Encryption.Name = 'AES Encryption';
            app.AES_Encryption.Resize = 'off';
            app.AES_Encryption.Scrollable = 'on';

            % Create AESENCRYPTIONLabel
            app.AESENCRYPTIONLabel = uilabel(app.AES_Encryption);
            app.AESENCRYPTIONLabel.FontName = 'Lucida Bright';
            app.AESENCRYPTIONLabel.FontSize = 40;
            app.AESENCRYPTIONLabel.FontWeight = 'bold';
            app.AESENCRYPTIONLabel.Position = [188 392 375 63];
            app.AESENCRYPTIONLabel.Text = 'AES ENCRYPTION';

            % Create DataTextAreaLabel
            app.DataTextAreaLabel = uilabel(app.AES_Encryption);
            app.DataTextAreaLabel.HorizontalAlignment = 'center';
            app.DataTextAreaLabel.Position = [63 338 31 22];
            app.DataTextAreaLabel.Text = 'Data';

            % Create DataTextArea
            app.DataTextArea = uitextarea(app.AES_Encryption);
            app.DataTextArea.Tooltip = {''};
            app.DataTextArea.Position = [111 192 569 170];

            % Create KeyTextAreaLabel
            app.KeyTextAreaLabel = uilabel(app.AES_Encryption);
            app.KeyTextAreaLabel.HorizontalAlignment = 'center';
            app.KeyTextAreaLabel.Position = [63 150 26 22];
            app.KeyTextAreaLabel.Text = 'Key';

            % Create KeyTextArea
            app.KeyTextArea = uitextarea(app.AES_Encryption);
            app.KeyTextArea.ValueChangedFcn = createCallbackFcn(app, @KeyTextAreaValueChanged, true);
            app.KeyTextArea.Tooltip = {''};
            app.KeyTextArea.Position = [110 152 570 20];

            % Create AESTypeDropDown_2Label
            app.AESTypeDropDown_2Label = uilabel(app.AES_Encryption);
            app.AESTypeDropDown_2Label.HorizontalAlignment = 'right';
            app.AESTypeDropDown_2Label.Position = [564 105 63 23];
            app.AESTypeDropDown_2Label.Text = 'AES Type';

            % Create AESTypeDropDown
            app.AESTypeDropDown = uidropdown(app.AES_Encryption);
            app.AESTypeDropDown.Items = {'128-bit', '192-bit', '256-bit'};
            app.AESTypeDropDown.Position = [636 106 74 22];
            app.AESTypeDropDown.Value = '128-bit';

            % Create EncryptButton
            app.EncryptButton = uibutton(app.AES_Encryption, 'push');
            app.EncryptButton.ButtonPushedFcn = createCallbackFcn(app, @EncryptButtonPushed, true);
            app.EncryptButton.BackgroundColor = [0.902 0.902 0.902];
            app.EncryptButton.FontName = 'Lucida Bright';
            app.EncryptButton.FontSize = 20;
            app.EncryptButton.FontWeight = 'bold';
            app.EncryptButton.Position = [437 40 100 33];
            app.EncryptButton.Text = 'Encrypt';

            % Create DecryptButton
            app.DecryptButton = uibutton(app.AES_Encryption, 'push');
            app.DecryptButton.ButtonPushedFcn = createCallbackFcn(app, @DecryptButtonPushed, true);
            app.DecryptButton.BackgroundColor = [0.902 0.902 0.902];
            app.DecryptButton.FontName = 'Lucida Bright';
            app.DecryptButton.FontSize = 20;
            app.DecryptButton.FontWeight = 'bold';
            app.DecryptButton.Position = [562 41 100 33];
            app.DecryptButton.Text = 'Decrypt';

            % Create KeyformatDropDownLabel
            app.KeyformatDropDownLabel = uilabel(app.AES_Encryption);
            app.KeyformatDropDownLabel.HorizontalAlignment = 'right';
            app.KeyformatDropDownLabel.Position = [36 106 66 23];
            app.KeyformatDropDownLabel.Text = 'Key format';

            % Create KeyformatDropDown
            app.KeyformatDropDown = uidropdown(app.AES_Encryption);
            app.KeyformatDropDown.Items = {'Plaintext', 'Hex'};
            app.KeyformatDropDown.Position = [112 106 85 20];
            app.KeyformatDropDown.Value = 'Plaintext';

            % Create IVTextAreaLabel
            app.IVTextAreaLabel = uilabel(app.AES_Encryption);
            app.IVTextAreaLabel.HorizontalAlignment = 'center';
            app.IVTextAreaLabel.Enable = 'off';
            app.IVTextAreaLabel.Position = [74 44 26 23];
            app.IVTextAreaLabel.Text = 'IV';

            % Create IVTextArea
            app.IVTextArea = uitextarea(app.AES_Encryption);
            app.IVTextArea.Enable = 'off';
            app.IVTextArea.Tooltip = {''};
            app.IVTextArea.Position = [121 47 276 20];

            % Create Image
            app.Image = uiimage(app.AES_Encryption);
            app.Image.Tooltip = {''; 'Data: Decryption data has to be a continuous hex value of length that is a multiple of 16. Both uppercase and lowercase letters are accepted.'; ''; 'Key: Encryption and decryption keys can either be 128-bit, 192-bit or 256-bit (depending on the selected AES Mode). One has a choice of either entering the key in plaintext or hex. If plaintext, for 128-bit key user should enter 16 characters, for 192-bit 24 characters and for 256-bit 32 characters. For hex, 128-bit key user should enter a continuous 32 hex value, for 192-bit a continuous 48 hex value and for 256-bit a continuous 64 hex value. '; 'Examples:'; 'Plaintext 128-bit key:Thats my Kung Fu'; 'Hex 128-bit key:5468617473206D79204B756E67204675'; ''; 'IV: Initialization vector requires a continuous 32 hex value when using AES Type CBC. If IV is unused leave text field blank. Example:'; '347117a91ddf95ab54037d299e32face'; ''; 'Recommendations: For encrypting information that is above 16 characters in length, it is suggested to use CBC instead of ECB to prevent leaking information. Whilst the user can choose not to use the IV for CBC, it is highly recommended a unique IV value be used for each encryption of data.'; ''; ''};
            app.Image.Position = [710 25 34 30];
            app.Image.ImageSource = 'help icon.png';

            % Create DataformatInputOutputDropDownLabel
            app.DataformatInputOutputDropDownLabel = uilabel(app.AES_Encryption);
            app.DataformatInputOutputDropDownLabel.HorizontalAlignment = 'center';
            app.DataformatInputOutputDropDownLabel.Position = [208 100 80 28];
            app.DataformatInputOutputDropDownLabel.Text = {'Data format'; '(Input/Output)'};

            % Create DataformatInputOutputDropDown
            app.DataformatInputOutputDropDown = uidropdown(app.AES_Encryption);
            app.DataformatInputOutputDropDown.Items = {'Plaintext', 'Hex'};
            app.DataformatInputOutputDropDown.Position = [294 106 90 22];
            app.DataformatInputOutputDropDown.Value = 'Plaintext';

            % Create AESModeDropDownLabel
            app.AESModeDropDownLabel = uilabel(app.AES_Encryption);
            app.AESModeDropDownLabel.HorizontalAlignment = 'right';
            app.AESModeDropDownLabel.Position = [403 105 70 23];
            app.AESModeDropDownLabel.Text = 'AES Mode';

            % Create AESModeDropDown
            app.AESModeDropDown = uidropdown(app.AES_Encryption);
            app.AESModeDropDown.Items = {'ECB', 'CBC'};
            app.AESModeDropDown.ValueChangedFcn = createCallbackFcn(app, @AESModeDropDownValueChanged2, true);
            app.AESModeDropDown.Position = [480 106 74 22];
            app.AESModeDropDown.Value = 'ECB';

            % Show the figure after all components are created
            app.AES_Encryption.Visible = 'on';
        end
    end

    % App creation and deletion
    methods (Access = public)

        % Construct app
        function app = GUI

            % Create UIFigure and components
            createComponents(app)

            % Register the app with App Designer
            registerApp(app, app.AES_Encryption)

            if nargout == 0
                clear app
            end
        end

        % Code that executes before app deletion
        function delete(app)

            % Delete UIFigure when app is deleted
            delete(app.AES_Encryption)
        end
    end
end
